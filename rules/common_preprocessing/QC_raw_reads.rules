
rule assess_quality_paired_raw_reads_with_fastqc:
    conda:
        "../../envs/FastQC.yml"
    input:
        "raw_reads/{sample}_R1.fastq.gz",
        "raw_reads/{sample}_R2.fastq.gz",
    output:
          "QC/FastQC/raw_reads/{RUN}/{sample}_R1_fastqc.zip",
          "QC/FastQC/raw_reads/{RUN}/{sample}_R2_fastqc.zip",
    log:
        logging_folder + "QC/FastQC/raw_reads/{RUN}/{sample}_fastqc.txt"
    shell:
        """
        fastqc {input} -o $(dirname {output[0]}) &> {log}
        """


rule create_per_run_raw_reads_multiqc_report:
    conda:
        "../../envs/MultiQC.yml"
    input:
      lambda wildcards: expand("QC/FastQC/raw_reads/{RUN}/{sample}_R1_fastqc.zip", sample = all_samples.index.values[all_samples[config["run_column"]] == wildcards.RUN], RUN = wildcards.RUN),
      lambda wildcards: expand("QC/FastQC/raw_reads/{RUN}/{sample}_R2_fastqc.zip", sample = all_samples.index.values[all_samples[config["run_column"]] == wildcards.RUN], RUN = wildcards.RUN),
    output:
        "QC/{RUN}_multiqc_raw_reads_report.html",
        "QC/{RUN}_multiqc_raw_reads_report_data/multiqc_general_stats.txt",
    log:
        logging_folder + "QC/{RUN}_multiqc_raw_reads_report.txt"
    priority:
        100
    shell:
        """
        multiqc -f -n {output[0]} $(dirname {input} | tr "\n" " ") --cl_config "max_table_rows: 100000" &> {log}
        """

rule create_overall_raw_reads_multiqc_report:
    conda:
        "../../envs/MultiQC.yml"
    input:
       sample_list(),
    output:
        "QC/multiqc_raw_reads_report.html",
        "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt",
    log:
        logging_folder + "QC/multiqc_raw_reads_report.txt"
    priority:
        100
    shell:
        """
        multiqc -f -n {output[0]} $(dirname {input} | tr "\n" " ") --cl_config "max_table_rows: 100000" &> {log}
        """
