

rule raw_to_processed_reads_stats:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base.rds",
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.tsv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.txt"
    script:
        "scripts/raw_to_processed_reads_stats.R"


rule raw_to_processed_reads_plot:
    conda:
        "../../envs/r_visualization.yml"
    input:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.tsv",
        Metadata_table = config["local_samples"],
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        reads_plot_with_filtered = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_filtered.png"
    params:
        grouping_column = config["grouping_column"],
        sample_label = config["sample_label"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_filtered.txt"
    script:
        "scripts/raw_to_processed_reads_plot.R"



rule raw_to_tax_filtered_reads_stats:
    conda:
        "../../envs/r_visualization.yml"
    input:
        read_filtering = "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base.rds",
        taxonomic_filtering = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/norarefaction/no_collapse/base.rds",
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.tsv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.txt"
    script:
        "scripts/raw_to_tax_filtered_reads_stats.R"



rule raw_to_tax_filtered_reads_plots:
    conda:
        "../../envs/r_visualization.yml"
    input:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.tsv",
        Metadata_table = config["local_samples"],
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        reads_plot_with_filtered = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_{filter_lineage}_in_{filter_tax_rank}_filtered.png"
    params:
        sample_label = config["sample_label"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_{filter_lineage}_in_{filter_tax_rank}_filtered.txt"
    script:
        "scripts/raw_to_processed_reads_plot.R"


rule KRONA_plots:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_melted_table = "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base_melted.tsv"
    output:
        output = "{tool}/5_visualization/{classifier}/{db_taxonomy}/KRONA/{grouping_column}/{grouping_col_value}.html"
    params:
        grouping_column = lambda wildcards: wildcards.grouping_column,
        grouping_col_value = lambda wildcards: wildcards.grouping_col_value,
        sample_label = config["sample_label"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/KRONA/{grouping_column}/{grouping_col_value}.txt"
    script:
        "scripts/KRONA_plots.R"


rule rarefaction_curve:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filtration_or_not}/{raref_or_not}/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        rarefaction_curve = "{tool}/5_visualization/{classifier}/{db_taxonomy}/rarefaction_curve/{filtration_or_not}/{raref_or_not}_rarefaction_curve.png"
    params:
        sample_type = config["sample_type"],
        sample_label = config["sample_label"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/rarefaction_curve/{filtration_or_not}/{raref_or_not}_rarefaction_curve.txt"
    script:
        "scripts/rarefaction_curve.R"



# A small function to transform the taxa levels to the collapse levels
def barplot_levels(wildcards):
    # print(wildcards)

    if wildcards == "OTU":
        value = 'no_collapse'
    elif wildcards == "Species" :
        value = 'collap_7'
    elif wildcards == "Genus" :
        value = 'collap_6'
    elif wildcards == "Family" :
        value = 'collap_5'
    elif wildcards == "Order" :
        value = 'collap_4'
    elif wildcards == "Class" :
        value = 'collap_4'
    elif wildcards == "Phylum" :
        value = 'collap_3'
    elif wildcards == "Kingdom" :
        value = 'collap_2'
    else :
        raise ValueError("Forbidden value in taxa level for barplots")

    # print(value)

    return(value)


rule barplots:
    singularity:
        "docker://valscherz/16srna:0.0.3-beta"
    input:
        phyloseq_melted_table = lambda wildcards: "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/norarefaction/" + barplot_levels(wildcards.plotting_tax_ranks) + "/base_melted.tsv"
    output:
        barplot = "{tool}/5_visualization/{classifier}/{db_taxonomy}/barplots/{filter_lineage}_in_{filter_tax_rank}/{relative_or_absolute_plot}/{grouping_column}/{grouping_col_value}_{relative_or_absolute_filtering}_{filtering_value}_{plotting_tax_ranks}_barplot.png",
        barplot_leg = "{tool}/5_visualization/{classifier}/{db_taxonomy}/barplots/{filter_lineage}_in_{filter_tax_rank}/{relative_or_absolute_plot}/{grouping_column}/{grouping_col_value}_{relative_or_absolute_filtering}_{filtering_value}_{plotting_tax_ranks}_barplot_leg.png",
    params:
        sample_label = config["sample_label"],
        grouping_column = lambda wildcards: wildcards.grouping_column,
        t_neg_PCR_sample_on_plots = config["t_neg_PCR_sample_on_plots"],
        t_neg_PCR_group_column_value = config["t_neg_PCR_group_column_value"],
        relative_or_absolute_filtering = lambda wildcards: wildcards.relative_or_absolute_filtering,
        filtering_value = lambda wildcards: wildcards.filtering_value,
        relative_or_absolute_plot = lambda wildcards: wildcards.relative_or_absolute_plot,
        plotting_tax_ranks = lambda wildcards: wildcards.plotting_tax_ranks,
        distinct_colors = config["distinct_colors"],
        horizontal_barplot = config["horizontal_barplot"],
        facet_plot = config["facet_plot"],
        facetting_column = config["facetting_column"],
        order_by_abundance = config["order_by_abundance"],
        separated_legend = config["separated_legend"],
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/barplot/{filter_lineage}_in_{filter_tax_rank}/{relative_or_absolute_plot}/{grouping_column}/{grouping_col_value}_{relative_or_absolute_filtering}_{filtering_value}_{plotting_tax_ranks}__barplot.txt",
    script:
        "scripts/barplot.R"


rule heatmaps:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_melted_table = lambda wildcards: "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/norarefaction/" + barplot_levels(wildcards.plotting_tax_ranks) + "/base_melted.tsv"
    output:
        heatmap = "{tool}/5_visualization/{classifier}/{db_taxonomy}/heatmaps/{filter_lineage}_in_{filter_tax_rank}/{relative_or_absolute_plot}/{grouping_column}/{grouping_col_value}_{relative_or_absolute_filtering}_{filtering_value}_{plotting_tax_ranks}_heatmap.png",
    params:
        sample_label = config["sample_label"],
        grouping_column = lambda wildcards: wildcards.grouping_column,
        t_neg_PCR_sample_on_plots = config["t_neg_PCR_sample_on_plots"],
        t_neg_PCR_group_column_value = config["t_neg_PCR_group_column_value"],
        relative_or_absolute_filtering = lambda wildcards: wildcards.relative_or_absolute_filtering,
        filtering_value = lambda wildcards: wildcards.filtering_value,
        relative_or_absolute_plot = lambda wildcards: wildcards.relative_or_absolute_plot,
        plotting_tax_ranks = lambda wildcards: wildcards.plotting_tax_ranks,
        horizontal_barplot = config["horizontal_barplot"],
        facet_plot = config["facet_plot"],
        facetting_column = config["facetting_column"],
        #order_by = config["order_by_abundance"],
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/barplot/{filter_lineage}_in_{filter_tax_rank}/{relative_or_absolute_plot}/{grouping_column}/{grouping_col_value}_{relative_or_absolute_filtering}_{filtering_value}_{plotting_tax_ranks}_heatmap.txt",
    script:
        "scripts/heatmap.R"


rule alpha_diversity:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filtered_or_not}/{raref_or_not}/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        alpha_plot = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/alpha_diversities/{filtered_or_not}/{grouping_column}/{grouping_col_value}_alpha_diversity.png",
    params:
        grouping_column = lambda wildcards: wildcards.grouping_column,
        grouping_col_value = lambda wildcards: wildcards.grouping_col_value,
        sample_label = config["sample_label"],
        sample_type = config["sample_type"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/alpha_diversity/{filtered_or_not}/{grouping_column}/{grouping_col_value}_alpha_diversity.txt"
    script:
        "scripts/alpha_diversity.R"



rule ordination_distance_based:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/{raref_or_not}/no_collapse/base_with_tree.rds",
        Metadata_table = config["local_samples"]
    output:
        ordination = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_distance_based/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/{grouping_col_value}_{ordination_distance}_d_{ordination_factor}.png",
    params:
        grouping_column = lambda wildcards: wildcards.grouping_column,
        grouping_col_value = lambda wildcards: wildcards.grouping_col_value,
        sample_label = config["sample_label"],
        sample_type = config["sample_type"],
        ordination_distance = lambda wildcards: wildcards.ordination_distance ,
        ordination_method = lambda wildcards: wildcards.ordination_method,
        ordination_factor = lambda wildcards: config["ordination_factor"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_distance_based/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/{grouping_col_value}_distance_{ordination_distance}_{ordination_factor}.txt",
    script:
        "scripts/ordination_distance_based.R"


rule ordination_unconstrained:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/{raref_or_not}/no_collapse/base_with_tree.rds",
        Metadata_table = config["local_samples"]
    output:
        unconstrained_ordination = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_unconstrained/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/{grouping_col_value}_u_{ordination_factor}.png",
    params:
        grouping_column = lambda wildcards: wildcards.grouping_column,
        grouping_col_value = lambda wildcards: wildcards.grouping_col_value,
        sample_label = config["sample_label"],
        sample_type = config["sample_type"],
        ordination_method = lambda wildcards: wildcards.ordination_method,
        ordination_factor = lambda wildcards: config["ordination_factor"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_unconstrained/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/unconstrained_{grouping_col_value}_{ordination_factor}.txt",
    script:
        "scripts/ordination_unconstrained.R"


rule ordination_constrained:
    conda:
        "../../envs/r_visualization.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/{raref_or_not}/no_collapse/base_with_tree.rds",
        Metadata_table = config["local_samples"]
    output:
        constrained_ordination = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_constrained/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/{grouping_col_value}_c_{ordination_factor}.png",
    params:
        grouping_column = lambda wildcards: wildcards.grouping_column,
        grouping_col_value = lambda wildcards: wildcards.grouping_col_value,
        sample_label = config["sample_label"],
        sample_type = config["sample_type"],
        ordination_method = lambda wildcards: wildcards.ordination_method,
        ordination_factor = lambda wildcards: wildcards.ordination_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination_constrained/{filter_lineage}_in_{filter_tax_rank}/{ordination_method}/{grouping_column}/constrained_{grouping_col_value}_{ordination_factor}.txt"
    script:
        "scripts/ordination_constrained.R"

