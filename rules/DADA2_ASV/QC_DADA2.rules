
rule assess_quality_paired_filtered_reads_with_fastqc :
    conda:
        "../../envs/FastQC.yml"
    input:
        "DADA2/1b_q_score_filtered_paired/{sample}_filtered_R1.fastq.gz",
        "DADA2/1b_q_score_filtered_paired/{sample}_filtered_R2.fastq.gz",
    output:
        "QC/FastQC/DADA2_filtered/{sample}_filtered_R1_fastqc.zip",
        "QC/FastQC/DADA2_filtered/{sample}_filtered_R2_fastqc.zip",
    log:
        logging_folder + "QC/FastQC/DADA2_filtered/{sample}_filtered_R1_fastqc.txt"
    shell:
        """
        fastqc {input} -o $(dirname {output[0]}) &> {log}
        """

rule create_filtered_reads_multiqc_report:
    conda:
        "../../envs/MultiQC.yml"
    input:
       expand("QC/FastQC/DADA2_filtered/{sample}_filtered_R1_fastqc.zip", sample = list(read_naming.keys())),
       expand("QC/FastQC/DADA2_filtered/{sample}_filtered_R2_fastqc.zip", sample = list(read_naming.keys())),
       expand("DADA2/1a_trimmed_primers/logs/{sample}_export_cutadapt_trim-paired.txt", sample = list(read_naming.keys()))
    output:
        "QC/multiqc_DADA2_filtered_reads_report.html"
    log:
        logging_folder + "QC/multiqc_filtered_reads_report.txt"
#    params:
#        configfile = multiqc_configfile
    shell:
        """
        multiqc -f -n {output[0]} $(dirname {input} | tr "\n" " ") &> {log[0]}
        """
