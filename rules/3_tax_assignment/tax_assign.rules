rule QIIME1_assign_taxonomy_rdp:
    conda:
        "../../envs/QIIME1.yml"
    singularity:
       "docker://metagenlab/amplicons_qiime1_rdp:v.1.0"       
    input:
        "{denoiser}/2_denoised/dna-sequences.fasta",
        config["tax_DB_path"] + "{tax_DB}/DB_amp.fasta",
        config["tax_DB_path"] + "{tax_DB}/DB_amp_taxonomy.txt"
    output:
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.txt",
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.log"
    log:
        logging_folder + "{denoiser}/3_classified/qiime_rdp_{tax_DB}/dna-sequences_tax_assignments_log.txt"
    threads:
        1
    resources:
        mem_mb=30000
    shell:
        '''
        export RDP_JAR_PATH=$CONDA_PREFIX/bin/rdp_classifier-2.2.jar;
        assign_path=$(which assign_taxonomy.py)
        python $assign_path \
          -i {input[0]} \
          -r {input[1]} \
          -t {input[2]} \
          -m rdp \
          -o $(dirname {output[0]}) \
          -c 0.5 \
          --rdp_max_memory {resources[mem_mb]}
           >> {log[0]}
        '''

rule dada2_assign_taxonomy_rdp:
    conda:
        "../../envs/DADA2_in_R.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-dada2:1.12.1--r36he1b5a44_0"
    input:
        seqs = "{denoiser}/2_denoised/dna-sequences.fasta",
        King_to_Species = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Species.txt",
        King_to_Genus = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Genus.txt",
        Genus_species = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_Genus_species.txt"
    output:
        tax = "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.txt",
    log:
        logging_folder + "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.log"
    threads:
        4
    resources:
        mem_mb=30000
    script:
        "scripts/dada2_rdp_tax_assign.R"



rule decipher_tax_assign:
    conda:
        "../../envs/decipher.yml"
    singularity:
        "docker://metagenlab/amplicons_decipher:v.1.0"
    input:
        trained_tax = config["tax_DB_path"] + "{tax_DB}/Decipher_DB_amp_taxonomy_decipher_trained_tax.rds",
        seq = "{denoiser}/2_denoised/dna-sequences.fasta",
    output:
        tax = "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.txt",
        tax_plot = "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.pdf"
    log:
      logging_folder + "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.log"
    threads:
        4
    resources:
        mem_mb=30000
    script:
        "scripts/decipher_assign_tax.R"



rule rdp_classify:
    conda:
        "../../envs/rdp_tools.yml"
    singularity:
        "docker://quay.io/biocontainers/rdptools:2.0.3--0"
    input:
       trained_ref = config["tax_DB_path"] + "{tax_DB}/RDP_train_file/rRNAClassifier.properties",
       query_seqs = "{denoiser}/2_denoised/dna-sequences.fasta",
    output:
        "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.txt",
    log:
        "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.log",
    threads:
        10
    resources:
        mem_mb=30000
    shell:
        '''
        classifier -Xmx30g classify \
        -c 0.5 \
        -f allrank \
        -t {input[0]} \
        -o {output[0]} {input[1]}
	    '''


rule rdp_format_output:
    conda:
        "../../envs/amplicons_r_utils.yml"
    singularity:
        "docker://metagenlab/amplicons_r_utils:v.1.0"  
    input:
        RDP_output= "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.txt",
    output:
       formatted_output = "{denoiser}/3_classified/RDP_{tax_DB}/dna-sequences_tax_assignments.txt",
    log:
        "{denoiser}/3_classified/RDP_{tax_DB}/dna-sequences_tax_assignments.log",
    threads:
        10
    resources:
        mem_mb=30000
    script:
        "scripts/format_RDP_output.R"

