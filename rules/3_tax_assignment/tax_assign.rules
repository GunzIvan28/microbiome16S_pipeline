rule QIIME1_assign_taxonomy_rdp:
    conda:
        "../../envs/QIIME1.yml"
    input:
        "{denoiser}/2_denoised/dna-sequences.fasta",
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4.fasta",
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy.txt"
    output:
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.txt",
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.log"
    log:
        logging_folder + "{denoiser}/3_classified/qiime_rdp_{tax_DB}/dna-sequences_tax_assignments_log.txt"
    threads:
        1
    resources:
        mem_mb=30000
    shell:
        '''
        export RDP_JAR_PATH=$CONDA_PREFIX/bin/rdp_classifier-2.2.jar;
        assign_path=$(which assign_taxonomy.py)
        python $assign_path \
          -i {input[0]} \
          -r {input[1]} \
          -t {input[2]} \
          -m rdp \
          -o $(dirname {output[0]}) \
          -c 0.5 \
          --rdp_max_memory {resources[mem_mb]}
           >> {log[0]}
        '''



rule dada2_prep_tax_db:
    conda:
        "../../envs/DADA2_in_R.yml"
    input:
        ref_seqs = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4.fasta",
        ref_tax = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy.txt"
    output:
        King_to_Species = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_King_to_Species.txt",
        King_to_Genus = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_King_to_Genus.txt",
        Genus_species = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_Genus_species.txt"
    log:
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_dada2_prep.log"
    threads:
        1
    script:
        "scripts/dada2_prep_tax.R"



rule dada2_assign_taxonomy_rdp:
    conda:
        "../../envs/DADA2_in_R.yml"
    input:
        seqs = "{denoiser}/2_denoised/dna-sequences.fasta",
        King_to_Species = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_King_to_Species.txt",
        King_to_Genus = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_King_to_Genus.txt",
        Genus_species = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_Genus_species.txt"
    output:
        tax = "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.txt",
    log:
        logging_folder + "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.log"
    threads:
        4
    resources:
        mem_mb=30000
    script:
        "scripts/dada2_rdp_tax_assign.R"


rule decipher_prep_fasta:
    conda:
        "../../envs/decipher.yml"
    input:
        ref_tax = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy.txt",
        ref_seqs = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4.fasta",
    output:
        decipher_seqs = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher.fasta",
    log:
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_fasta.log"
    threads:
        1
    script:
        "scripts/decipher_prep_tax.R"


rule decipher_train_tax:
    conda:
        "../../envs/decipher.yml"
    input:
        decipher_seqs = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher.fasta"
    output:
        trained_tax = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_trained_tax.rds",
        training_plot = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_trained_plot.pdf",
    log:
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_tax_tree.log",
    threads:
        1
    script:
        "scripts/decipher_train_tax.R"


rule decipher_tax_assign:
    conda:
        "../../envs/decipher.yml"
    input:
        tax_tree = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_tax_tree.txt",
        decipher_seqs = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher.fasta",
    output:
        trained_tax = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_trained_tax.txt",
        training_plot = workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_trained_plot.pdf",
    log:
        workflow.basedir + "/data/{tax_DB}/EzBioCloud_V3V4_taxonomy_decipher_tax_tree.log",
    threads:
        1
    script:
        "scripts/decipher_assign_tax.R"
