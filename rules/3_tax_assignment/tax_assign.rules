rule QIIME1_assign_taxonomy_rdp:
    conda:
        "../../envs/QIIME1.yml"
    singularity:
       "docker://metagenlab/qiime_rdp:v.1.0"       
    input:
        "{denoiser}/2_denoised/dna-sequences.fasta",
        config["tax_DB_path"] + "{tax_DB}/DB_amp.fasta",
        config["tax_DB_path"] + "{tax_DB}/DB_amp_taxonomy.txt"
    output:
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.txt",
        "{denoiser}/3_classified/qiimerdp_{tax_DB}/dna-sequences_tax_assignments.log"
    log:
        logging_folder + "{denoiser}/3_classified/qiime_rdp_{tax_DB}/dna-sequences_tax_assignments_log.txt"
    threads:
        1
    resources:
        mem_mb=30000
    shell:
        '''
        export RDP_JAR_PATH=$CONDA_PREFIX/bin/rdp_classifier-2.2.jar;
        assign_path=$(which assign_taxonomy.py)
        python $assign_path \
          -i {input[0]} \
          -r {input[1]} \
          -t {input[2]} \
          -m rdp \
          -o $(dirname {output[0]}) \
          -c 0.5 \
          --rdp_max_memory {resources[mem_mb]}
           >> {log[0]}
        '''


rule dada2_prep_tax_db:
    conda:
        "../../envs/DADA2_in_R.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-dada2:1.12.1--r36he1b5a44_0"
    input:
        ref_seqs = "{prefix}/{tax_DB}/DB_amp.fasta",
        ref_tax = "{prefix}/{tax_DB}/DB_amp_taxonomy.txt"
    output:
        King_to_Species ="{prefix}/{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Species.txt",
        King_to_Genus = "{prefix}/{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Genus.txt",
        Genus_species =  "{prefix}/{tax_DB}/DADA2_DB_amp_taxonomy_Genus_species.txt"
    log:
        workflow.basedir + "{prefix}/{tax_DB}/DB_amp_taxonomy_dada2_prep.log"
    threads:
        1
    script:
        "scripts/dada2_prep_tax.R"



rule dada2_assign_taxonomy_rdp:
    conda:
        "../../envs/DADA2_in_R.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-dada2:1.12.1--r36he1b5a44_0"
    input:
        seqs = "{denoiser}/2_denoised/dna-sequences.fasta",
        King_to_Species = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Species.txt",
        King_to_Genus = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_King_to_Genus.txt",
        Genus_species = config["tax_DB_path"]  + "{tax_DB}/DADA2_DB_amp_taxonomy_Genus_species.txt"
    output:
        tax = "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.txt",
    log:
        logging_folder + "{denoiser}/3_classified/dada2rdp_{tax_DB}/dna-sequences_tax_assignments.log"
    threads:
        4
    resources:
        mem_mb=30000
    script:
        "scripts/dada2_rdp_tax_assign.R"


rule decipher_prep_fasta:
    conda:
        "../../envs/decipher.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-decipher:2.12.0--r36h516909a_1"
    input:
        ref_tax = "{prefix}/{tax_DB}/DB_amp_taxonomy.txt",
        ref_seqs = "{prefix}/{tax_DB}/DB_amp.fasta",
    output:
        "{prefix}/{tax_DB}/{tax_DB}/Decipher_DB_amp_taxonomy_decipher.fasta",
    log:
        "{prefix}/{tax_DB}/DB_amp_taxonomy_decipher_fasta.log"
    threads:
        1
    script:
        "scripts/decipher_prep_tax.R"


rule decipher_train_tax:
    conda:
        "../../envs/decipher.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-decipher:2.12.0--r36h516909a_1"
    input:
        decipher_seqs = "{prefix}/{tax_DB}/Decipher_DB_amp_taxonomy_decipher.fasta"
    output:
        trained_tax = "{prefix}/{tax_DB}/Decipher_DB_amp_taxonomy_decipher_trained_tax.rds",
        training_plot = "{prefix}/{tax_DB}/Decipher_DB_amp_taxonomy_decipher_trained_plot.pdf",
    log:
        "{prefix}/{tax_DB}/DB_amp_taxonomy_decipher_tax_tree.log",
    threads:
        1
    script:
        "scripts/decipher_train_tax.R"


rule decipher_tax_assign:
    conda:
        "../../envs/decipher.yml"
    singularity:
        "docker://quay.io/biocontainers/bioconductor-decipher:2.12.0--r36h516909a_1"
    input:
        trained_tax = config["tax_DB_path"] + "/{tax_DB}/Decipher_DB_amp_taxonomy_decipher_trained_tax.rds",
        seq = "{denoiser}/2_denoised/dna-sequences.fasta",
    output:
        tax = "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.txt",
        tax_plot = "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.pdf"
    log:
      logging_folder + "{denoiser}/3_classified/decipher_{tax_DB}/dna-sequences_tax_assignments.log"
    threads:
        4
    resources:
        mem_mb=30000
    script:
        "scripts/decipher_assign_tax.R"


# Original RDP implementation, based on https://john-quensen.com/tutorials/training-the-rdp-classifier/

rule preformat_for_cannonical_rdp:
    conda:
        "../../envs/amplicons_r_utils.yml"
    singularity:
        "docker://metagenlab/amplicons_r_utils:v.1.0"  
    input:
        ref_tax = "{prefix}/{tax_DB}/DB_amp_taxonomy.txt",
        ref_seqs = "{prefix}/{tax_DB}/DB_amp.fasta",
    output:
        formatted_table = "{prefix}/{tax_DB}/RDP_formatted_tax_table.tsv",
    log:
      workflow.basedir + "{prefix}/{tax_DB}/RDP_formatted_tax_table.log",
    threads:
        1
    script:
        "scripts/rdp_prep_tax.R"


rule format_rdp_lineages:
    conda:
        "../../envs/Python2.yml"
    singularity:
        "docker://python:2.7"  
    input:
        formatted_table = "{prefix}/{tax_DB}/RDP_formatted_tax_table.tsv",
    output:
        read4train_tax = "{prefix}/{tax_DB}/RDP_ready4train_lineages.txt",
    params:
        script =  workflow.basedir + "/rules/3_tax_assignment/scripts/lineage2taxTrain.py"
    threads:
        1
    shell:
        '''
        python {params[0]} {input[0]} > {output[0]}
        '''

 
rule format_rdp_add_lineages:
    conda:
        "../../envs/Python2.yml"
    singularity:
        "docker://python:2.7"  
    input:
        taxonomyFile = "{prefix}/{tax_DB}/RDP_formatted_tax_table.tsv",
        fastaFile = "{prefix}/{tax_DB}/DB_amp.fasta",
    output:
        read4train_fasta = "{prefix}/{tax_DB}/RDP_ready4train_seqs.fasta",
    params:
        script =  workflow.basedir + "/rules/3_tax_assignment/scripts/addFullLineage.py"
    threads:
        1
    shell:
        '''
        python {params[0]} {input[0]} {input[1]} > {output[0]}       
        '''


rule train_rdp_classifier:
    conda:
        "../../envs/rdp_tools.yml"
    singularity:
        "docker://quay.io/biocontainers/rdptools:2.0.3--0"
    input:
       read4train_fasta = "{prefix}/{tax_DB}/RDP_ready4train_seqs.fasta",
       read4train_tax = "{prefix}/{tax_DB}/RDP_ready4train_lineages.txt",
    output:
        formatted_table = "{prefix}/{tax_DB}/RDP_train_file/bergeyTrainingTree.xml",
        properties = "{prefix}/{tax_DB}/RDP_train_file/rRNAClassifier.properties"
    log:
      "{prefix}/{tax_DB}/RDP_train_file.log",
    threads:
        1
    resources:
        mem_mb=30000
    shell:
        '''
        classifier -Xmx30g train \
        -o $(dirname {output[0]}) \
        -s {input[0]} \
        -t {input[1]} && \
        echo "bergeyTree=bergeyTrainingTree.xml
        probabilityList=genus_wordConditionalProbList.txt
        probabilityIndex=wordConditionalProbIndexArr.txt
        wordPrior=logWordPrior.txt
        classifierVersion=RDP Naive Bayesian rRNA Classifier Version 2.5, May 2012" > {output[1]}
	    '''


rule rdp_classify:
    conda:
        "../../envs/rdp_tools.yml"
    singularity:
        "docker://quay.io/biocontainers/rdptools:2.0.3--0"
    input:
       trained_ref = config["tax_DB_path"] + "{tax_DB}/RDP_train_file/rRNAClassifier.properties",
       query_seqs = "{denoiser}/2_denoised/dna-sequences.fasta",
    output:
        "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.txt",
    log:
        "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.log",
    threads:
        10
    resources:
        mem_mb=30000
    shell:
        '''
        classifier -Xmx30g classify \
        -c 0.5 \
        -f allrank \
        -t {input[0]} \
        -o {output[0]} {input[1]}
	    '''


rule rdp_format_output:
    conda:
        "../../envs/amplicons_r_utils.yml"
    singularity:
        "docker://metagenlab/amplicons_r_utils:v.1.0"  
    input:
        RDP_output= "{denoiser}/3_classified/RDP_{tax_DB}/RDP_tax_assignments.txt",
    output:
       formatted_output = "{denoiser}/3_classified/RDP_{tax_DB}/dna-sequences_tax_assignments.txt",
    log:
        "{denoiser}/3_classified/RDP_{tax_DB}/dna-sequences_tax_assignments.log",
    threads:
        10
    resources:
        mem_mb=30000
    script:
        "scripts/format_RDP_output.R"

