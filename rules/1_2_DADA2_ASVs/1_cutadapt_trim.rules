## Remove primers from sequences

from Bio.Seq import Seq

rule cutadapt_trim_for_DADA2:
    conda:
        "../../envs/cutadapt.yml"
    input:
        R1_raw_reads = "raw_reads/{sample}_R1.fastq.gz",
        R2_raw_reads = "raw_reads/{sample}_R2.fastq.gz"
    output:
        R1_trimmed_reads = temp("{denoiser}/1a_trimmed_primers/{sample}_trimmed_R1.fastq.gz"),
        R2_trimmed_reads = temp("{denoiser}/1a_trimmed_primers/{sample}_trimmed_R2.fastq.gz"),
    log:
        logging_folder + "{denoiser}/1a_trimmed_primers/{sample}_trimmed.txt"
    params:
        forward_primer = config["forward_primer"],
        reverse_primer = config["reverse_primer"],
        forward_primer_compl = forward_primer.reverse_complement(),
        reverse_primer_compl = reverse_primer.reverse_complement(),
    threads:
        1
    shell:
        '''
        if [ "{config["ITS_or_16S"]}" = "ITS" ]
        then
            echo "ITS" \
            cutadapt \
            --cores {threads} \
            --error-rate 0.1 \
            --times 1 \
            --overlap 3 \
            -o {output[R1_trimmed_reads]} \
            -p {output[R2_trimmed_reads]} \
            -g '{params[forward_primer]}' -a '{params[reverse_primer_compl]}' \
            -G '{params[reverse_primer]}' -A '{params[forward_primer_compl]}' \
            --match-read-wildcards \
            {input[R1_raw_reads]} \
            {input[R2_raw_reads]} >> {log}

        else
            echo "16S" \
            cutadapt \
            --cores {threads} \
            --error-rate 0.1 \
            --times 1 \
            --overlap 3 \
            -o {output[R1_trimmed_reads]} \
            -p {output[R2_trimmed_reads]} \
            -g '{params[forward_primer]}' \
            -G '{params[reverse_primer]}' \
            --match-read-wildcards \
            {input[R1_raw_reads]} \
            {input[R2_raw_reads]} >> {log}

        fi
        '''
