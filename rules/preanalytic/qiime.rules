
rule qiime_import:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/0_importing_data/manifest.csv",
    output:
        "{tool}/0_importing_data/imported_data.qza",
    log:
        logging_folder + "{tool}/import.txt"
    shell:
        """
        qiime tools import \
        --type 'SampleData[PairedEndSequencesWithQuality]' \
        --input-path {input[0]} \
        --output-path {output[0]} \
        --source-format PairedEndFastqManifestPhred33 >> {log[0]}          
        """

# raw or trimmed sequences?
rule qiime_cutadapt_trim_paired:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/0_importing_data/imported_data.qza",
    output:
        "{tool}/1a_cutadapt_primers_trimming/trimmed_sequences.qza",
    threads:
        4
    log:
        logging_folder + "{tool}/cutadapt_trim-paired.txt"
    shell:
        """
        qiime cutadapt trim-paired \
        --i-demultiplexed-sequences {input[0]} \
        --p-cores {threads} \
        --p-front-f CCTACGGGNGGCWGCAG \
        --p-front-r GACTACHVGGGTATCTAATCC \
        --p-match-read-wildcards \
        --p-match-adapter-wildcards \
        --o-trimmed-sequences  {output[0]} \
        --verbose
        >> {log[0]}          
        """

rule qiime_demux_summarize:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/1a_cutadapt_primers_trimming/trimmed_sequences.qza",
    output:
        "{tool}/1a_cutadapt_primers_trimming/visualization.qzv",
    log:
        logging_folder + "{tool}/demux_summarize.txt"
    shell:
        """
        qiime demux summarize \
          --i-data {input[0]} \
          --o-visualization {output[0]} >> {log[0]}          
        """

rule qiime_vsearch_join_pairs:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/1a_cutadapt_primers_trimming/trimmed_sequences.qza",
    output:
        "{tool}/1b_vsearch_joining/joined_sequences.qza",
    log:
        logging_folder + "{tool}/evsearch_join_pairs.txt"
    shell:
        '''
        qiime vsearch join-pairs \
          --i-demultiplexed-seqs {input[0]} \
          --o-joined-sequences {output[0]} \
          --p-minovlen 20 \
          --p-maxdiffs 3 \
          --p-minmergelen 350 \
          --p-maxmergelen 600 \
          --verbose >> {log[0]}       
        '''


'''
qiime demux summarize \
  --i-data ./1b_vsearch_joining/joined_sequences.qza \
  --o-visualization ./1b_vsearch_joining/joined_sequences.qzv
'''

rule qiime_quality_filter_q_score_joined:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/1b_vsearch_joining/joined_sequences.qza",
    output:
        "{tool}/1c_q_score_filtering/quality_filtered_sequences.qza",
        "{tool}/1c_q_score_filtering/quality_filtered_stats.qza"
        # qiime2/1c_q_score_filtering/quality_filtered_sequences.qza
    log:
        logging_folder + "{tool}/evsearch_join_pairs.txt"
    shell:
        '''
         qiime quality-filter q-score-joined \
            --i-demux {input[0]} \
            --p-min-quality 20 \
            --p-quality-window 3 \
            --p-min-length-fraction 0.75 \
            --p-max-ambiguous 0 \
            --o-filtered-sequences {output[0]} \
            --o-filter-stats {output[1]} \
            --verbose >> {log[0]}       
        '''





rule qiime_deblur_denoise_16S:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/1c_q_score_filtering/quality_filtered_sequences.qza",
    output:
        "{tool}/2_denoised/{denoiser}/table.qza",
        "{tool}/2_denoised/{denoiser}/seqs.qza",
        "{tool}/2_denoised/{denoiser}/stats.qza",
    log:
        logging_folder + "qiime/vsearch_join_pairs.txt"
    threads:
        2
    params:
        trim_length = config["deblur_p_trim_length"],
    shell:
        '''
        qiime deblur denoise-16S \
            --i-demultiplexed-seqs {input[0]} \
            --p-trim-length {params[0]} \
            --p-sample-stats \
            --p-min-reads 2 \
            --p-min-size 2 \
            --p-hashed-feature-ids \
            --p-jobs-to-start {threads} \
            --o-table {output[0]} \
            --o-representative-sequences {output[1]} \
            --o-stats {output[2]} \
            --verbose >> {log[0]}       
        '''

rule deblur_visualize_stats:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/2_denoised/{denoiser}/stats.qza",
    output:
        "{tool}/2_denoised/{denoiser}/stats.qzv",
    log:
        logging_folder + "qiime/deblur_visualize-stats.txt"
    shell:
        '''
        qiime deblur visualize-stats \
            --i-deblur-stats {input[0]} \
            --o-visualization ./ \
            --verbose     
        '''

rule qiime_feature_table_summarize:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/2_denoised/{denoiser}/table.qza",
    output:
        "{tool}/2_denoised/{denoiser}/table.qzv",
    log:
        logging_folder + "qiime/deblur_visualize-stats.txt"
    shell:
        '''
        qiime feature-table summarize \
          --i-table {input[0]} \
          --o-visualization {output[0]} >> {log[0]}
        '''


rule qiime_feature_table_tabulate_seqs:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/2_denoised/{denoiser}/seqs.qza",
    output:
        "{tool}/2_denoised/{denoiser}/seqs.qzv",
    log:
        logging_folder + "qiime/feature-table_tabulate-seqs.txt"
    shell:
        '''
        qiime feature-table tabulate-seqs \
          --i-data {input[0]} \
          --o-visualization {output[0]} >> {log[0]}
        '''

rule qiime_metadata_tabulate:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/1c_q_score_filtering/quality_filtered_stats.qza",
    output:
        "{tool}/1c_q_score_filtering/quality_filtered_stats.qzv",
    log:
        logging_folder + "qiime/metadata_tabulate-seqs.txt"
    shell:
        '''
        qiime metadata tabulate \
          --m-input-file {input[0]} \
          --o-visualization {output[0]} >> {log[0]}
        '''

rule qiime_alignment_mafft:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/2_denoised/{denoiser}/seqs.qza",
    output:
        "{tool}/4_tree/aligned-rep-seqs.qza",
    log:
        logging_folder + "qiime/mafft.txt"
    shell:
        '''
            qiime alignment mafft \
              --i-sequences {input[0]} \
              --o-alignment {output[0]} >> {log[0]}
        '''

rule qiime_alignment_mask:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/4_tree/aligned-rep-seqs.qza",
    output:
        "{tool}/4_tree/masked-aligned-rep-seqs.qza",
    log:
        logging_folder + "qiime/mafft_align_mask.txt"
    shell:
        '''
        qiime alignment mask \
          --i-alignment {input[0]} \
          --o-masked-alignment {output[0]}>> {log[0]}
        '''

rule qiime_phylogeny_fasttree:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/4_tree/masked-aligned-rep-seqs.qza",
    output:
        "{tool}/4_tree/unrooted-tree.qza",
    log:
        logging_folder + "qiime/tree.txt"
    shell:
        '''
        qiime phylogeny fasttree \
          --i-alignment input[0] \
          --o-tree {output[0]}>> {log[0]}
        '''

rule qiime_phylogeny_midpoint_root:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/4_tree/unrooted-tree.qza",
    output:
        "{tool}/4_tree/rooted-tree.qza",
    log:
        logging_folder + "qiime/tree_midpoint_rooted.txt"
    shell:
        '''
        qiime phylogeny midpoint-root \
          --i-tree {input[0]} \
          --o-rooted-tree {output[0]}>> {log[0]}
        '''


rule qiime_export_sequences:
    conda:
        pipeline_path + "envs/qiime2-2018.6-py35-linux-conda.yml"
    input:
        "{tool}/2_denoised/{denoiser}/seqs.qza",
    output:
        "{tool}/2_denoised/{denoiser}/dna-sequences.fasta",
    log:
        logging_folder + "qiime/export_seq.txt"
    shell:
        '''
        qiime tools export  {input[0]} --output-dir $( dirname {output[0]}) >> {log[0]}
        '''

'''
# ajouter
# output: 





'''

rule qiime1_assign_taxonomy:
    conda:
        pipeline_path + "envs/qiime1.yml"
    input:
        "{tool}/2_denoised/{denoiser}/dna-sequences.fasta",
        pipeline_path + "data/{db_taxonomy}/EzBioCloud_V3V4.fasta",
        pipeline_path + "data/{db_taxonomy}/EzBioCloud_V3V4_taxonomy.txt",
    output:
        "{tool}/3_classified/{denoiser}/{classifier}/{db_taxonomy}/dna-sequences_tax_assignments.txt",
        "{tool}/3_classified/{denoiser}/{classifier}/{db_taxonomy}/dna-sequences_tax_assignments.log",
    log:
        logging_folder + "qiime/assign_taxonomy_{db_taxonomy}.txt"
    shell:
        '''
        assign_taxonomy.py \
          -i {input[0]} \
          -r {input[1]}
          -t {input[2]}\
          -m rdp \
          -o $(dirname {output[0]})  \
          -c 0.5 \
          --rdp_max_memory 30000          
           >> {log[0]}
        '''


'''         
qiime tools export ./1a_cutadapt_primers_trimming/trimmed_sequences.qza --output-dir ./1a_cutadapt_primers_trimming/exported/
qiime tools export ./2_deblur_denoised/table_deblur.qza --output-dir ./2_deblur_denoised
qiime tools export  ./2_deblur_denoised/seqs_deblur.qza --output-dir ./2_deblur_denoised
'''