## Preprocessing

rule create_biom_from_count_table_2 :
    conda:
        "../../envs/DADA2_in_R.yml"
    input:
       "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count_table.txt",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/otu_biom.biom",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/otu_biom.biom"
    script:
        '''
        "scripts/create_biom_from_count_table.R"
        '''

rule import_count_table_to_QIIME2_2 :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/otu_biom.biom",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.txt",
    shell:
        '''
        qiime tools import \
        --input-path {input[0]} \
        --type 'FeatureTable[Frequency]' \
        --input-format BIOMV100Format \
        --output-path {output[0]}
        '''

rule import_tree_to_QIIME2_2 :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/tree.tree",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/rooted-tree.qza",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/rooted-tree.txt",
    shell:
        '''
        qiime tools import \
          --input-path {input} \
          --output-path {output} \
          --type 'Phylogeny[Rooted]'
        '''

## ANCOM
rule Qiime2_pseudocounts :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_pseudocounts.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_pseudocounts.txt"
    shell:
        '''
        qiime composition add-pseudocount \
        --i-table {input} \
        --o-composition-table {output}
        '''

rule Qiime2_ANCOM :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_pseudocounts.qza"
        Metadata = config["local_samples"],
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{tested_factor}.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/ANCOM/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{tested_factor}.txt"
    shell:
        '''
        qiime composition ancom \
          --i-table {input[table]} \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --o-visualization {output}
        '''


## Gneiss

#https://docs.qiime2.org/2018.11/plugins/available/gneiss/gradient-clustering/
rule Qiime2_Gneiss_gradient_clustering :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
        Metadata = config["local_samples"],
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/Gneiss/gradient/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_{tested_factor}_clustering.qza"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/Gneiss/gradient/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_{tested_factor}_clustering.txt"
    shell:
        '''
        qiime gneiss gradient-clustering \
          --i-table {input[table]} \
          --m-gradient-file {input[Metadata]}  \
          --m-gradient-column {params[tested_factor]} \
          --o-clustering {output}
        '''

#https://docs.qiime2.org/2018.11/plugins/available/gneiss/correlation-clustering/
rule Qiime2_Gneiss_correlation_clustering :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/Gneiss/correlation/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_correlation_clustering.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/collap_{collapse_level}/Gneiss/correlation/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_correlation_clustering.txt"
    shell:
        '''
        qiime gneiss correlation-clustering \
          --i-table {input[table]} \
          --o-clustering {output}
        '''


#https://docs.qiime2.org/2018.11/plugins/available/gneiss/ilr-hierarchical/
rule Qiime2_Gneiss_ilr_hierarchical :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_{clustering_factor}_clustering.qza"
    output:
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_{clustering_factor}_balances.qza"
    log:
        logging_folder +  "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_hier_{clustering_factor}_balances.txt"
    shell:
        '''
        qiime gneiss ilr-hierarchical \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --o-balances {output}
        '''


#https://docs.qiime2.org/2018.11/plugins/available/gneiss/ilr-phylogenetic/
rule Qiime2_Gneiss_ilr_phylogeny :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
        tree =  "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/tree.tree",
    output:
        balance = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phlogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_phyl_phylogenetic_balances.qza"
        hierarchy = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phlogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_phyl_phylogenetic_clustering.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phlogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_phyl_phylogenetic_clustering.txt"
    shell:
        '''
        qiime gneiss ilr-phylogenetic \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --o-balances {output[balance]} \
          --o-hierarchy {output[hierarchy]}
        '''


rule Qiime2_Gneiss_ols_regression :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        balance = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_balances.qza"
        Metadata = config["local_samples"],
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_clustering.qza"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_regression_{clustering_factor}.qzv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/differential_abundance/{collapse}/Gneiss/{clustering_method}_regression_{clustering_factor}.txt"
    shell:
        '''
        qiime gneiss ols-regression \
          --p-formula "{config[Gneiss_formula]}" \
          --i-table {input[balance]} \
          --i-tree {input[tree]} \
          --m-metadata-file {input[Metadata]} \
          --o-visualization {output}
        '''


rule Qiime2_Gneiss_heatmap :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
        Metadata = config["local_samples"],
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_clustering.qza"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_heatmap.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_heatmap.txt"
    shell:
        '''
        qiime gneiss dendrogram-heatmap \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --p-color-map seismic \
          --o-visualization {output}
        '''


# A small function to transform the 7 collapse values into 0 to fit the requirements of this function
def myfunc(wildcards):
    if wildcards == '7':
        value = '0'
    else :
        value = wildcards
    return(value)







######################## stopped here ###########################



#https://docs.qiime2.org/2018.11/plugins/available/gneiss/balance-taxonomy/
rule Qiime2_Gneiss_balance_taxonomy :
    conda:
        "../../envs/QIIME2-2019.01.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_export/count-table.qza",
        Metadata = config["local_samples"],
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/differential_abundance/no_collapse/Gneiss/{clustering_method}/{clustering_factor}_clustering.qza",
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{column_value}_in_{meta_column}_{clustering_factor}_clustering.qza"
        taxonomy = "{tool}/3_classified/{classifier}/{db_taxonomy}/dna-sequences_tax_assignments.qza"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/differential_abundance/taxa_collapse_{collapse_level}/Gneiss/{clustering_method}/{tested_factor}_taxbalance_{clustering_factor}_y_{y_balances}.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor,
        collapse_level = lambda wildcards: myfunc(wildcards.collapse_level),
        y_balances = lambda wildcards: wildcards.y_balances
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/differential_abundance/taxa_collapse_{collapse_level}/Gneiss/{clustering_method}/{tested_factor}_taxbalance_{clustering_factor}_y_{y_balances}.qzv"
    shell:
        '''
        qiime gneiss balance-taxonomy \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --i-taxonomy {input[taxonomy]} \
          --p-taxa-level {params[collapse_level]} \
          --p-balance-name 'y{params[y_balances]}' \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --o-visualization {output}
        '''
