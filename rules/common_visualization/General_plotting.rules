
rule raw_to_filtered_reads_stats:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/phyloseq_object",
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.tsv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.txt"
    script:
        "scripts/raw_to_filtered_reads_stats.R"


rule reads_plot_with_filtered:
    conda:
        "../../envs/R_visualization.yml"
    input:
        raw_to_filtered_reads_stats_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/raw_to_filtered_reads_stats.tsv",
        Metadata_table = config["local_samples"]
    output:
        reads_plot_with_filtered = "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_filtered.tiff"
    params:
        grouping_column = config["grouping_column"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/reads/reads_plot_with_filtered.txt"
    script:
        "scripts/reads_plots_with_filtration.R"



rule KRONA_plots:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_melted_table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/phyloseq_melted_table.tsv"
    output:
        output = expand("{{tool}}/5_visualization/{{classifier}}/{{db_taxonomy}}/KRONA/{grouping_column}.html", grouping_column=list(set(all_samples[config["grouping_column"]])))
    params:
        grouping_column = config["grouping_column"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/KRONA.txt"
    script:
        "scripts/KRONA_plots.R"



rule alpha_diversity:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/phyloseq_object",
        Metadata_table = config["local_samples"]
    output:
        alpha_plot = "{tool}/5_visualization/{classifier}/{db_taxonomy}/alpha_diversity/alpha_divesity.tiff"
    params:
        grouping_column = config["grouping_column"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/alpha_diversity/alpha_divesity.txt"
    script:
        "scripts/alpha_diversity.R"


rule ordination:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/phyloseq_object",
        Metadata_table = config["local_samples"]
    output:
        output1 = "{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/unifrac.tiff",
        output2 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/wunifrac.tiff",
        # output3 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/dpcoa.tiff",
        output4 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/jsd.tiff",
        output5 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/bray.tiff",
        output6 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/jaccard.tiff",
        output7 ="{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/chao.tiff"
    params:
        grouping_column = config["grouping_column"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/ordination/logs.txt"
    script:
        "scripts/ordination.R"
