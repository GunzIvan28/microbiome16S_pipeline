
rule raw_to_filtered_reads_stats:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds",
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        raw_to_filtered_reads_stats = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/reads/raw_to_filtered_reads_stats.tsv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/reads/raw_to_filtered_reads_stats.txt"
    script:
        "scripts/raw_to_filtered_reads_stats.R"


rule reads_plot_with_filtered:
    conda:
        "../../envs/R_visualization.yml"
    input:
        raw_to_filtered_reads_stats_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/reads/raw_to_filtered_reads_stats.tsv",
        Metadata_table = config["local_samples"],
        multi_QC_report_path = "QC/multiqc_raw_reads_report_data/multiqc_general_stats.txt"
    output:
        reads_plot_with_filtered = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/reads/reads_plot_with_filtered.png"
    params:
        grouping_column = config["grouping_column"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/reads/reads_plot_with_filtered.txt"
    script:
        "scripts/reads_plots_with_filtration.R"


rule KRONA_plots:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_melted_table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base_melted.tsv"
    output:
        output = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/KRONA/{grouping_column}.html"
    params:
        grouping_column = config["grouping_column"],
        grouping_filter_column_value = lambda wildcards: wildcards.grouping_column,
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/{grouping_column}_KRONA.txt"
    script:
        "scripts/KRONA_plots.R"


rule alpha_diversity:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/{filter_rules}_samples.rds",
        Metadata_table = config["local_samples"]
    output:
        alpha_plot = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/alpha_diversity/{filter_rules}/{grouping_column}_alpha_divesity.png",
    params:
        grouping_column = config["grouping_column"],
        grouping_filter_column_value = lambda wildcards: wildcards.grouping_column,
        x_axis_column = config["x_axis_column"],
        sample_type = config["sample_type"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/alpha_diversity/{filter_rules}/{grouping_column}_alpha_divesity.txt"
    script:
        "scripts/alpha_diversity.R"



rule ordination_distance_based:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        output1 = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/distance_based/{ordination_method_distance_based}/{grouping_column}_d_{ordination_distance}.png",
    params:
        grouping_column = config["grouping_column"],
        grouping_filter_column_value = lambda wildcards: wildcards.grouping_column,
        x_axis_column = config["x_axis_column"],
        sample_type = config["sample_type"],
        ordination_distance = lambda wildcards: wildcards.ordination_distance ,
        ordination_method = lambda wildcards: wildcards.ordination_method_distance_based,
        ordination_factor = lambda wildcards: config["ordination_factor"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/distance_based/{ordination_method_distance_based}/{grouping_column}_d_{ordination_distance}_logs.txt"
    script:
        "scripts/ordination_distance_based.R"


rule ordination_unconstrained:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        output1 = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/unconstrained/{ordination_method}/{grouping_column}.png",
    params:
        grouping_column = config["grouping_column"],
        grouping_filter_column_value = lambda wildcards: wildcards.grouping_column,
        x_axis_column = config["x_axis_column"],
        sample_type = config["sample_type"],
        ordination_method = lambda wildcards: wildcards.ordination_method,
        ordination_factor = lambda wildcards: config["ordination_factor"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/unconstrained/{ordination_method}/{grouping_column}_logs.txt"
    script:
        "scripts/ordination_unconstrained.R"


rule ordination_constrained:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        output1 = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/constrained/{ordination_method}/{grouping_column}_f_{ordination_factor}.png",
    params:
        grouping_column = config["grouping_column"],
        grouping_filter_column_value = lambda wildcards: wildcards.grouping_column,
        x_axis_column = config["x_axis_column"],
        sample_type = config["sample_type"],
        ordination_method = lambda wildcards: wildcards.ordination_method,
        ordination_factor = lambda wildcards: wildcards.ordination_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/ordination/constrained/{ordination_method}/{grouping_column}_f_{ordination_factor}.logs.txt"
    script:
        "scripts/ordination_constrained.R"
