
## Preprocessing

rule import_tree_to_QIIME2_2 :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/tree.tree",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/rooted-tree.qza",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/rooted-tree.txt",
    shell:
        '''
        qiime tools import \
          --input-path {input} \
          --output-path {output} \
          --type 'Phylogeny[Rooted]'
        '''

rule import_taxonomy_to_Qiime2_2 :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/dna-sequences_tax_assignments.txt"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/dna-sequences_tax_assignments.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/dna-sequences_tax_assignments.txt"
    shell:
        '''
        qiime tools import \
         --type FeatureData[Taxonomy] \
         --input-path {input[0]} \
         --input-format HeaderlessTSVTaxonomyFormat \
         --output-path {output[0]}
        '''

## ANCOM
rule Qiime2_pseudocounts :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_pseudocounts.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_pseudocounts.txt"
    shell:
        '''
        qiime composition add-pseudocount \
        --i-table {input} \
        --o-composition-table {output}
        '''

rule Qiime2_ANCOM :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_pseudocounts.qza",
        Metadata = config["local_samples"],
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/ANCOM/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_f_{tested_factor}.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/ANCOM/{collapsed_or_not}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_f_{tested_factor}.txt"
    shell:
        '''
        qiime composition ancom \
          --i-table {input[table]} \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --o-visualization {output}
        '''

## Gneiss
#https://docs.qiime2.org/2018.11/plugins/available/gneiss/gradient-clustering/
rule Qiime2_Gneiss_gradient_clustering :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
        Metadata = config["Qiime2_metadata"],
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/gradient/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_{tested_factor}_clustering.qza"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/gradient/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_{tested_factor}_clustering.txt"
    shell:
        '''
        qiime gneiss gradient-clustering \
          --i-table {input[table]} \
          --m-gradient-file {input[Metadata]}  \
          --m-gradient-column {params[tested_factor]} \
          --o-clustering {output}
        '''

#https://docs.qiime2.org/2018.11/plugins/available/gneiss/correlation-clustering/
rule Qiime2_Gneiss_correlation_clustering :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/correlation/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_correlation_clustering.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/correlation/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_correlation_clustering.txt"
    shell:
        '''
        qiime gneiss correlation-clustering \
          --i-table {input} \
          --o-clustering {output}
        '''


#https://docs.qiime2.org/2018.11/plugins/available/gneiss/ilr-hierarchical/
rule Qiime2_Gneiss_ilr_hierarchical :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_{clustering_factor}_clustering.qza",
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza"
    output:
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/hier_{clustering_factor}_balances.qza"
    log:
        logging_folder +  "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_hier_{clustering_factor}_balances.txt"
    shell:
        '''
        qiime gneiss ilr-hierarchical \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --o-balances {output}
        '''


#https://docs.qiime2.org/2018.11/plugins/available/gneiss/ilr-phylogenetic/
rule Qiime2_Gneiss_ilr_phylogeny :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
        #tree =  "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_featuresfilt/rooted-tree.qza",
        tree = "{tool}/4_tree/rooted-tree.qza",
    output:
        balance = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phylogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/phyl_phylogenetic_balances.qza",
        hierarchy = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phylogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/phyl_phylogenetic_clustering.qza"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/phlogeny/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/_phyl_phylogenetic_clustering.txt"
    shell:
        '''
        qiime gneiss ilr-phylogenetic \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --o-balances {output[balance]} \
          --o-hierarchy {output[hierarchy]}
        '''


rule Qiime2_Gneiss_ols_regression :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        balance = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_balances.qza",
        Metadata = config["local_samples"],
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_clustering.qza"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_regression.qzv"
    log:
        logging_folder +  "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/regression_{clustering_factor}.txt"
    shell:
        '''
        qiime gneiss ols-regression \
          --p-formula "{config[Gneiss_formula]}" \
          --i-table {input[balance]} \
          --i-tree {input[tree]} \
          --m-metadata-file {input[Metadata]} \
          --o-visualization {output}
        '''


rule Qiime2_Gneiss_heatmap :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
        Metadata = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/metadata_table.tsv",
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_clustering.qza"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_heatmap_{tested_factor}.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapse}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_{tested_factor}_heatmap.txt"
    shell:
        '''
        qiime gneiss dendrogram-heatmap \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --p-color-map seismic \
          --o-visualization {output}
        '''


# A small function to transform the 7 collapse values into 0 to fit the requirements of this function
def coll_level_fct(wildcards):
    if wildcards == "no_collapse":
        value = '0'
    else :
        input = re.findall('\d+',wildcards)
        value = int(input[0]) -1
    return(value)


rule Qiime2_Gneiss_balance_taxonomy :
    conda:
        "../../envs/QIIME2-2019.04.yml"
    input:
        table = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/count-table.qza",
        Metadata = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/metadata_table.tsv",
        tree = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_clustering.qza",
        taxonomy = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/3_filter_features/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}_features_export/dna-sequences_tax_assignments.qza",
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_y_{y_balances}_f_{tested_factor}.qzv"
    params:
        tested_factor = lambda wildcards: wildcards.tested_factor,
        collapse_level = lambda wildcards: coll_level_fct(wildcards.collapsed_or_not),
        y_balances = lambda wildcards: wildcards.y_balances
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/diff_abundance/{collapsed_or_not}/Gneiss/{clustering_method}/{filter_tax_rank}_{filter_lineage}_taxfilt_{filter_column_value}_in_{filter_meta_column}/{clustering_factor}_y_{y_balances}_f_{tested_factor}.txt"
    shell:
        '''
        qiime gneiss balance-taxonomy \
          --i-table {input[table]} \
          --i-tree {input[tree]} \
          --i-taxonomy {input[taxonomy]} \
          --p-taxa-level {params[collapse_level]} \
          --p-balance-name 'y{params[y_balances]}' \
          --m-metadata-file {input[Metadata]} \
          --m-metadata-column {params[tested_factor]} \
          --o-visualization {output}
        '''
