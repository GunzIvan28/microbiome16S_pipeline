## Small function to extract numbers from rarefaction values
import re
def rafe_value_fct(wildcards):
    if wildcards == "norarefaction":
        value = "norarefaction"
    else :
        value = re.findall('\d+',wildcards)
    return value


rule to_Phyloseq_and_rarefy:
    conda:
        "../../envs/R_visualization.yml"
    input:
        count_table = "{tool}/2_denoised/count_table.txt",
        Metadata_table = config["local_samples"],
        taxonomy_table = "{tool}/3_classified/{classifier}/{db_taxonomy}/dna-sequences_tax_assignments.txt",
        tax_tree = "{tool}/4_tree/tree.nwk"
    output:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{rarefaction_value}/physeq/no_collapse/base.rds"
    params:
        rarefaction_value = lambda wildcards: rafe_value_fct(wildcards.rarefaction_value),
        viz_replace_empty_tax = config["viz_replace_empty_tax"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{rarefaction_value}/physeq/no_collapse/base_physeq.txt"
    script:
        "scripts/physeq_rarefy_and_import.R"


rule rarefaction_curve:
    conda:
        "../../envs/R_visualization.yml"
    input:
        phyloseq_object = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds",
        Metadata_table = config["local_samples"]
    output:
        rarefaction_curve = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/rarefaction_curve.png"
    params:
        sample_type = config["sample_type"],
        x_axis_column = config["x_axis_column"]
    log:
        logging_folder +"{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/rarefaction_curve.txt"
    script:
        "scripts/rarefaction_curve.R"


rule Phyloseq_collapse_taxa:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/base.rds"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/base.rds"
    params:
        collapse_level = lambda wildcards: wildcards.collapse_level,
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/collap_{collapse_level}/collapse_base.txt"
    script:
        "scripts/physeq_collapse_taxa.R"


rule filter_Phyloseq_taxa:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/base.rds"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/1_filter_taxa/{filter_tax_rank}_{filter_lineage}_taxfilt.rds"
    params:
        filter_tax_rank = lambda wildcards: wildcards.filter_tax_rank,
        filter_lineage = lambda wildcards: wildcards.filter_lineage,
        filter_out_tax_rank = config["filter_out_tax_rank"],
        filter_out_lineage = config["filter_out_lineage"],
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/1_filter_taxa/{filter_tax_rank}_{filter_lineage}_taxfilt.txt"
    script:
        "scripts/physeq_filter_taxa.R"


rule filter_Phyloseq_samples:
    conda:
        "../../envs/R_visualization.yml"
    input:
         "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/1_filter_taxa/{prefix}_taxfilt.rds"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/2_filter_samples/{prefix}_{filter_column_value}_in_{filter_meta_column}_samples.rds"
    params:
        filter_meta_column = lambda wildcards: wildcards.filter_meta_column,
        filter_column_value = lambda wildcards: wildcards.filter_column_value
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/2_filter_samples/{prefix}_{filter_column_value}_in_{filter_meta_column}_samples.txt"
    script:
        "scripts/physeq_filter_samples.R"


rule filter_Phyloseq_features:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/2_filter_samples/{prefix}_samples.rds"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapse_or_not}/3_filter_features/{prefix}_features.rds"
    params:
        filter_features_subset_formula = config["filter_features_subset_formula"]
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/no_collapse/3_filter_features/{prefix}_features.txt"
    script:
        "scripts/physeq_subset_features.R"



rule Phyloseq_transform_to_percent:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}.rds"
    output:
        tree_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_trfs.rds",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_trfs."
    script:
        "scripts/physeq_pct_trsf.R"


rule melt_Phyloseq_object:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}.rds"
    output:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}_melted.tsv"
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}_melted.txt"
    script:
        "scripts/physeq_melt_table.R"
        

rule export_Phyloseq_object:
    conda:
        "../../envs/R_visualization.yml"
    input:
        "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}.rds"
    output:
        tree_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_export/tree.tree",
        meta_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_export/metadata_table.csv",
        taxonomy_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_export/dna-sequences_tax_assignments.txt",
        OTU_path = "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_export/count_table.txt",
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{raref_or_not}/physeq/{collapsed_or_not}/{prefix1}/{prefix2}_export/export.txt",
    script:
        "scripts/physeq_export.R"


rule transpose_count_table:
    conda:
        "../../envs/datamash.yml"
    input:
        "{prefix}/count_table.txt"
    output:
        "{prefix}/count_table_transposed.txt"
    priority:
        50
    log:
        logging_folder + "{prefix}/count_table_transposed.log"
    shell:
        "datamas transpose --nostrict < {input} > {output}"


