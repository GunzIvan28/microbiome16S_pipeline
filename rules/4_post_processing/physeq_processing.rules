## Set a rule order for ambiguous rules
ruleorder: physeq_tax_filtering > physeq_rarefy
ruleorder: Phyloseq_collapse_taxa > Phyloseq_transform_to_percent

## Small function to extract numbers from rarefaction values
import re
def rafe_value_fct(wildcards):
# if wildcards == "norarefaction":
#    value = "norarefaction"
# else :
    value = re.findall('\d+',wildcards)
    return value


# Import for the first time everything into a phyloseq object
rule physeq_initial_import:
    conda:
        "../../envs/physeq.yml"
    input:
        count_table = "{tool}/2_denoised/count_table.txt",
        Metadata_table = config["local_samples"],
        taxonomy_table = "{tool}/3_classified/{classifier}/{db_taxonomy}/dna-sequences_tax_assignments.txt",
        rep_seqs = "{tool}/2_denoised/dna-sequences.fasta",
        tax_tree = "{tool}/2_denoised/tree.nwk"
    output:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base.rds"
    params:
        viz_replace_empty_tax = config["viz_replace_empty_tax"]
    log:
        logging_folder + "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base.txt"
    script:
        "scripts/physeq_initial_import.R"


rule physeq_export_object:
    conda:
        "../../envs/physeq.yml"
    input:
        phyloseq_object = "{prefix1}.rds"
    output:
        tree_path = "{prefix1}_export/tree.tree",
        meta_path = "{prefix1}_export/metadata_table.tsv",
        taxonomy_path = "{prefix1}_export/dna-sequences_tax_assignments.txt",
        OTU_path = "{prefix1}_export/count_table.txt",
        rep_seq_path = "{prefix1}_export/dna-sequences.fasta",
    log:
        logging_folder + "{prefix1}_export/export.txt",
    script:
        "scripts/physeq_export.R"


# Filter sequences based on taxonomic assignment
rule physeq_tax_filtering:
    conda:
        "../../envs/physeq.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/nofiltering/norarefaction/no_collapse/base.rds"
    output:
        phyloseq_filtered_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/norarefaction/no_collapse/base.rds",
    params:
        filter_tax_rank = lambda wildcards: wildcards.filter_tax_rank,
        filter_lineage = lambda wildcards: wildcards.filter_lineage,
        filter_out_tax_rank = config["filter_out_tax_rank"],
        filter_out_lineage = config["filter_out_lineage"]
    log:
        logging_folder + "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_lineage}_in_{filter_tax_rank}/no_collapse/base.txt",
    script:
        "scripts/physeq_filter_taxa.R"


rule physeq_rarefy:
    conda:
        "../../envs/physeq.yml"
    input:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/norarefaction/no_collapse/base.rds"
    output:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/rarefaction_{rarefaction_value}/no_collapse/base.rds",
    params:
        rarefaction_value = lambda wildcards: rafe_value_fct(wildcards.rarefaction_value)
    log:
        logging_folder + "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/rarefaction_{rarefaction_value}/no_collapse/base.txt",
    script:
        "scripts/physeq_rarefy.R"



rule physeq_new_tree:
    conda:
        "../../envs/physeq.yml"
    input:
        new_tree = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/no_collapse/base_export/tree.nwk",
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/no_collapse/base.rds"
    output:
        phyloseq_object = "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/no_collapse/base_with_tree.rds"
    log:
        logging_folder + "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/no_collapse/base_with_tree.txt"
    script:
        "scripts/physeq_add_new_tree.R"



rule melt_Phyloseq_object:
    conda:
        "../../envs/physeq.yml"
    input:
        "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filtered_or_not}/{raref_or_not}/{collapsed_or_not}/{prefix1}.rds"
    output:
        "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filtered_or_not}/{raref_or_not}/{collapsed_or_not}/{prefix1}_melted.tsv"
    log:
        logging_folder + "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filtered_or_not}/{raref_or_not}/{collapsed_or_not}/{prefix1}_melted.txt"
    script:
        "scripts/physeq_melt_table.R"


rule Phyloseq_collapse_taxa:
    conda:
        "../../envs/physeq.yml"
    input:
        "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/no_collapse/{prefix}.rds"
    output:
        "{tool}/4_physeq/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/collap_{collapse_level}/{prefix}.rds"
    params:
        collapse_level = lambda wildcards: wildcards.collapse_level,
    log:
        logging_folder + "{tool}/5_visualization/{classifier}/{db_taxonomy}/{filter_or_not}/{raref_or_not}/collap_{collapse_level}/{prefix}.txt"
    script:
        "scripts/physeq_collapse_taxa.R"


rule Phyloseq_transform_to_percent:
    conda:
        "../../envs/physeq.yml"
    input:
        "{prefix}.rds"
    output:
        "{prefix}_trfs.rds",
    log:
        logging_folder + "{prefix}_trfs.txt",
    script:
        "scripts/physeq_pct_trsf.R"


rule transpose_and_meta_count_table:
    conda:
        "../../envs/physeq.yml"
    input:
        count_table = "{prefix}/count_table.txt",
        meta = "{prefix}/metadata_table.tsv"
    output:
        transposed_table = "{prefix}/count_table_transposed.txt",
        merged_meta = "{prefix}/count_table_transposed_with_meta.txt"
    priority:
        1
    log:
        logging_folder + "{prefix}/count_table_transposed.log"
    script:
        "scripts/transpose_and_add_meta_count_table.R"
