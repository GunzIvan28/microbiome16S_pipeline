

import pandas as pd
import re


rule decompress_assemblies:
    input:
        'assembly_gz/{sample}.fna.gz'
    output:
        'assembly_gz/{sample}.fna'
    shell:
        "zcat {input[0]} > {output[0]}"


rule print_primers_to_files :
    output:
        "InSilico/assembly_fna/Primers.fasta"
    params:
        forward = config["forward_primer"],
        reverse = config["reverse_primer"]
    shell:
        '''
        printf \
        ">Primer -F 
        {params[0]}
        >Primer -R
        {params[1]}" >> {output}
        '''


def list_samples(wildcards):
    checkpoint_output = checkpoints.combine_assembly_tables.get(**wildcards).output[0]
    table=pd.read_csv(checkpoint_output,delimiter='\t')
    acc=list(table['AssemblyNames'])
    expd=expand('assembly_gz/{sample}.fna',sample=acc)
    return expd


rule Extract_V3V4 :
    conda:
        "../../in_silico_PCR/.travis.yml"
    input :
        list_samples,
        "InSilico/assembly_fna/Primers.fasta",
        "assembly_gz/{sample}.fna"
    output :
        "InSilico/PCR/{sample}_extracted_amplicons.fna"
    params:
        min_length = config["merged_min_length"],
        max_length = config["merged_max_length"],
    threads :
        1
    shell :
        '''
        primer_finder.py supremacy \
        -p {output}
        -s {input[1]}
        -pf {input[2]} 
         '''


def list_amplicons(wildcards):
    checkpoint_output = checkpoints.combine_assembly_tables.get(**wildcards).output[0]
    table=pd.read_csv(checkpoint_output,delimiter='\t')
    acc=list(table['AssemblyNames'])
    expd=expand('InSilico/PCR/{sample}_extracted_amplicons.fna',sample=acc)
    return expd

#primer enlever


### Combine all extracted sequences in one big fasta
rule Insilico_merge_all_in_one_fasta:
    input:
        list_amplicons
    output:
        temp("InSilico/1c_derep/merged_all.fasta")
    shell:
        '''
        cat {input} >> {output}
        '''


### Again, dereplicate all identical sequences after merging. Sequences must at least be twice in dataset to be kept.
rule InSilico_derepicate_all:
    conda:
        "../../envs/QIIME1.yml"
    input:
        "InSilico/1c_derep/merged_all.fasta"
    output:
        "InSilico/2_denoised/dna-sequences.fasta"
    log:
         logging_folder + "InSilico/1c_all_merged_sequences/dereplicate_all.txt"
    shell:
        '''
        vsearch --derep_fulllength {input} \
                --sizeout \
                --minuniquesize 2 \
                --output {output} \
                2> {log}
        '''


### Count the number of occurences of the representative sequences in the samples.
rule InSilico_count_occurences :
    conda:
        "../../envs/QIIME1.yml"
    input:
        samples = list_samples,
        rep_seq = "InSilico/2_denoised/dna-sequences.fasta"
    output:
        "InSilico/2_denoised/countOTUs/{sample}_count_table.txt",
    log:
         logging_folder + "InSilico/2_denoised/countOTUs/{sample}_count_table.txt"
    shell:
        '''
        vsearch --usearch_global {input[samples]} \
        -otutabout {output} \
        -id 1 \
        -strand plus \
        --db {input[rep_seq]} \
        2> {log}
        '''


def list_samples_counts(wildcards):
    checkpoint_output = checkpoints.combine_assembly_tables.get(**wildcards).output[0]
    table=pd.read_csv(checkpoint_output,delimiter='\t')
    acc=list(table['AssemblyNames'])
    expd=expand('InSilico/PCR/{sample}_count_table.txt',sample=acc)
    return expd


### Format count table from InSilico
rule create_InSilico_count_table :
    conda:
        "../../envs/r_visualization.yml"
    input:
        list_samples_counts
    output:
        count_table = "InSilico/2_denoised/count_table.txt"
    log:
        logging_folder +  "InSilico/2_denoised/count_table.txt"
    script:
        "scripts/create_count_table_from_insilico.R"












